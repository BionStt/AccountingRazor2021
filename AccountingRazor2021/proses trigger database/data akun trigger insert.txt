/*
Deployment script for AccountingRazor2021

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AccountingRazor2021"
:setvar DefaultFilePrefix "AccountingRazor2021"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Creating Trigger [dbo].[trg_DataAccount_INS]...';


GO
CREATE TRIGGER [dbo].trg_DataAccount_INS
	ON [dbo].DataAccount
	AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;

	--Cannot function on more than 1 inserted record at a time
	IF (SELECT COUNT(1) FROM Inserted) > 1
	BEGIN
		RAISERROR (N'This table does not support multiple inserts in one SQL statement', 18, 1)

		DELETE FROM Accounting.DataAccount
		WHERE Id IN (SELECT NoUrutId FROM Inserted)

		RETURN
	END

	--If Root node, simply place at the end (right) of all other Roots (i.e. max-right)
	IF ((SELECT Parent FROM Inserted) IS NULL
		OR (SELECT Parent FROM Inserted) = -1) -- root node
	BEGIN
		DECLARE @Left INT

		SELECT @Left = COALESCE(MAX(Rgt), 0) + 1
		FROM Accounting.DataAccount

		UPDATE Accounting.DataAccount
		SET Lft = @Left, Rgt = @Left + 1, Depth = 0
		WHERE Id = (SELECT NoUrutId FROM Inserted)
	END
	--Else, shift ALL sub-trees over (right) by 2
	--& place the newly Inserted at the tail-end (right) of its siblings
	ELSE
	BEGIN
		DECLARE @ParentRight INT, @Depth INT

		SELECT @ParentRight = Rgt, @Depth = Depth + 1
		FROM Accounting.DataAccount
		WHERE Id = (SELECT Parent FROM Inserted)

		--SHIFT EVERYTHING ELSE OVER (right) 2
		UPDATE Accounting.DataAccount
		SET Lft = CASE WHEN Lft > @ParentRight THEN Lft + 2 ELSE Lft END
		  , Rgt = CASE WHEN Rgt >= @ParentRight THEN Rgt + 2 ELSE Rgt END
		WHERE Rgt >= @ParentRight

		--new record goes "below" (to the right of) its right-most sibling
		UPDATE Accounting.DataAccount
		SET Lft = @ParentRight, Rgt = @ParentRight + 1
		  , Depth = @Depth
		WHERE Id = (SELECT NoUrutId FROM Inserted)
	END
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
GO
PRINT N'Update complete.';


GO
